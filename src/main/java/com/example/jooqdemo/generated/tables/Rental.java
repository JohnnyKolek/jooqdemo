/*
 * This file is generated by jOOQ.
 */
package com.example.jooqdemo.generated.tables;


import com.example.jooqdemo.generated.Keys;
import com.example.jooqdemo.generated.Public;
import com.example.jooqdemo.generated.tables.records.RentalRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rental extends TableImpl<RentalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rental</code>
     */
    public static final Rental RENTAL = new Rental();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentalRecord> getRecordType() {
        return RentalRecord.class;
    }

    /**
     * The column <code>public.rental.id</code>.
     */
    public final TableField<RentalRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rental.id_book_copy</code>.
     */
    public final TableField<RentalRecord, Integer> ID_BOOK_COPY = createField(DSL.name("id_book_copy"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.rental.id_reader</code>.
     */
    public final TableField<RentalRecord, Integer> ID_READER = createField(DSL.name("id_reader"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.rental.rental_date</code>.
     */
    public final TableField<RentalRecord, LocalDate> RENTAL_DATE = createField(DSL.name("rental_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Rental(Name alias, Table<RentalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rental(Name alias, Table<RentalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.rental</code> table reference
     */
    public Rental(String alias) {
        this(DSL.name(alias), RENTAL);
    }

    /**
     * Create an aliased <code>public.rental</code> table reference
     */
    public Rental(Name alias) {
        this(alias, RENTAL);
    }

    /**
     * Create a <code>public.rental</code> table reference
     */
    public Rental() {
        this(DSL.name("rental"), null);
    }

    public <O extends Record> Rental(Table<O> child, ForeignKey<O, RentalRecord> key) {
        super(child, key, RENTAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RentalRecord, Integer> getIdentity() {
        return (Identity<RentalRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RentalRecord> getPrimaryKey() {
        return Keys.RENTAL_PKEY;
    }

    @Override
    public List<UniqueKey<RentalRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ID_BOOK_COPY_UNIQUE);
    }

    @Override
    public List<ForeignKey<RentalRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENTAL__FK_RENTAL_BOOK_COPY, Keys.RENTAL__FK_RENTAL_READER);
    }

    private transient BookCopy _bookCopy;
    private transient Reader _reader;

    /**
     * Get the implicit join path to the <code>public.book_copy</code> table.
     */
    public BookCopy bookCopy() {
        if (_bookCopy == null)
            _bookCopy = new BookCopy(this, Keys.RENTAL__FK_RENTAL_BOOK_COPY);

        return _bookCopy;
    }

    /**
     * Get the implicit join path to the <code>public.reader</code> table.
     */
    public Reader reader() {
        if (_reader == null)
            _reader = new Reader(this, Keys.RENTAL__FK_RENTAL_READER);

        return _reader;
    }

    @Override
    public Rental as(String alias) {
        return new Rental(DSL.name(alias), this);
    }

    @Override
    public Rental as(Name alias) {
        return new Rental(alias, this);
    }

    @Override
    public Rental as(Table<?> alias) {
        return new Rental(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rental rename(String name) {
        return new Rental(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rental rename(Name name) {
        return new Rental(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rental rename(Table<?> name) {
        return new Rental(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
