/*
 * This file is generated by jOOQ.
 */
package com.example.jooqdemo.generated.tables.records;


import com.example.jooqdemo.generated.tables.Rental;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RentalRecord extends UpdatableRecordImpl<RentalRecord> implements Record4<Integer, Integer, Integer, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.rental.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.rental.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.rental.id_book_copy</code>.
     */
    public void setIdBookCopy(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.rental.id_book_copy</code>.
     */
    public Integer getIdBookCopy() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.rental.id_reader</code>.
     */
    public void setIdReader(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.rental.id_reader</code>.
     */
    public Integer getIdReader() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.rental.rental_date</code>.
     */
    public void setRentalDate(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.rental.rental_date</code>.
     */
    public LocalDate getRentalDate() {
        return (LocalDate) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Integer, LocalDate> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Rental.RENTAL.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Rental.RENTAL.ID_BOOK_COPY;
    }

    @Override
    public Field<Integer> field3() {
        return Rental.RENTAL.ID_READER;
    }

    @Override
    public Field<LocalDate> field4() {
        return Rental.RENTAL.RENTAL_DATE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getIdBookCopy();
    }

    @Override
    public Integer component3() {
        return getIdReader();
    }

    @Override
    public LocalDate component4() {
        return getRentalDate();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getIdBookCopy();
    }

    @Override
    public Integer value3() {
        return getIdReader();
    }

    @Override
    public LocalDate value4() {
        return getRentalDate();
    }

    @Override
    public RentalRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RentalRecord value2(Integer value) {
        setIdBookCopy(value);
        return this;
    }

    @Override
    public RentalRecord value3(Integer value) {
        setIdReader(value);
        return this;
    }

    @Override
    public RentalRecord value4(LocalDate value) {
        setRentalDate(value);
        return this;
    }

    @Override
    public RentalRecord values(Integer value1, Integer value2, Integer value3, LocalDate value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RentalRecord
     */
    public RentalRecord() {
        super(Rental.RENTAL);
    }

    /**
     * Create a detached, initialised RentalRecord
     */
    public RentalRecord(Integer id, Integer idBookCopy, Integer idReader, LocalDate rentalDate) {
        super(Rental.RENTAL);

        setId(id);
        setIdBookCopy(idBookCopy);
        setIdReader(idReader);
        setRentalDate(rentalDate);
        resetChangedOnNotNull();
    }
}
