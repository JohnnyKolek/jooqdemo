/*
 * This file is generated by jOOQ.
 */
package com.example.jooqdemo.generated.tables;


import com.example.jooqdemo.generated.Keys;
import com.example.jooqdemo.generated.Public;
import com.example.jooqdemo.generated.tables.records.BookCopyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookCopy extends TableImpl<BookCopyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.book_copy</code>
     */
    public static final BookCopy BOOK_COPY = new BookCopy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookCopyRecord> getRecordType() {
        return BookCopyRecord.class;
    }

    /**
     * The column <code>public.book_copy.id</code>.
     */
    public final TableField<BookCopyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.book_copy.id_book</code>.
     */
    public final TableField<BookCopyRecord, Integer> ID_BOOK = createField(DSL.name("id_book"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.book_copy.isbn</code>.
     */
    public final TableField<BookCopyRecord, String> ISBN = createField(DSL.name("isbn"), SQLDataType.VARCHAR(20), this, "");

    private BookCopy(Name alias, Table<BookCopyRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookCopy(Name alias, Table<BookCopyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.book_copy</code> table reference
     */
    public BookCopy(String alias) {
        this(DSL.name(alias), BOOK_COPY);
    }

    /**
     * Create an aliased <code>public.book_copy</code> table reference
     */
    public BookCopy(Name alias) {
        this(alias, BOOK_COPY);
    }

    /**
     * Create a <code>public.book_copy</code> table reference
     */
    public BookCopy() {
        this(DSL.name("book_copy"), null);
    }

    public <O extends Record> BookCopy(Table<O> child, ForeignKey<O, BookCopyRecord> key) {
        super(child, key, BOOK_COPY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BookCopyRecord, Integer> getIdentity() {
        return (Identity<BookCopyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookCopyRecord> getPrimaryKey() {
        return Keys.BOOK_COPY_PKEY;
    }

    @Override
    public List<ForeignKey<BookCopyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOK_COPY__FK_BOOK_COPY_BOOK);
    }

    private transient Book _book;

    /**
     * Get the implicit join path to the <code>public.book</code> table.
     */
    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.BOOK_COPY__FK_BOOK_COPY_BOOK);

        return _book;
    }

    @Override
    public BookCopy as(String alias) {
        return new BookCopy(DSL.name(alias), this);
    }

    @Override
    public BookCopy as(Name alias) {
        return new BookCopy(alias, this);
    }

    @Override
    public BookCopy as(Table<?> alias) {
        return new BookCopy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookCopy rename(String name) {
        return new BookCopy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookCopy rename(Name name) {
        return new BookCopy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookCopy rename(Table<?> name) {
        return new BookCopy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
