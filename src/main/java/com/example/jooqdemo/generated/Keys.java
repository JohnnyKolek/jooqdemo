/*
 * This file is generated by jOOQ.
 */
package com.example.jooqdemo.generated;


import com.example.jooqdemo.generated.tables.Author;
import com.example.jooqdemo.generated.tables.Book;
import com.example.jooqdemo.generated.tables.BookCopy;
import com.example.jooqdemo.generated.tables.Reader;
import com.example.jooqdemo.generated.tables.Rental;
import com.example.jooqdemo.generated.tables.records.AuthorRecord;
import com.example.jooqdemo.generated.tables.records.BookCopyRecord;
import com.example.jooqdemo.generated.tables.records.BookRecord;
import com.example.jooqdemo.generated.tables.records.ReaderRecord;
import com.example.jooqdemo.generated.tables.records.RentalRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("author_pkey"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> BOOK_PKEY = Internal.createUniqueKey(Book.BOOK, DSL.name("book_pkey"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<BookCopyRecord> BOOK_COPY_PKEY = Internal.createUniqueKey(BookCopy.BOOK_COPY, DSL.name("book_copy_pkey"), new TableField[] { BookCopy.BOOK_COPY.ID }, true);
    public static final UniqueKey<ReaderRecord> READER_PKEY = Internal.createUniqueKey(Reader.READER, DSL.name("reader_pkey"), new TableField[] { Reader.READER.ID }, true);
    public static final UniqueKey<RentalRecord> ID_BOOK_COPY_UNIQUE = Internal.createUniqueKey(Rental.RENTAL, DSL.name("id_book_copy_unique"), new TableField[] { Rental.RENTAL.ID_BOOK_COPY }, true);
    public static final UniqueKey<RentalRecord> RENTAL_PKEY = Internal.createUniqueKey(Rental.RENTAL, DSL.name("rental_pkey"), new TableField[] { Rental.RENTAL.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_BOOK_AUTHOR = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_author"), new TableField[] { Book.BOOK.ID_AUTHOR }, Keys.AUTHOR_PKEY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<BookCopyRecord, BookRecord> BOOK_COPY__FK_BOOK_COPY_BOOK = Internal.createForeignKey(BookCopy.BOOK_COPY, DSL.name("fk_book_copy_book"), new TableField[] { BookCopy.BOOK_COPY.ID_BOOK }, Keys.BOOK_PKEY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<RentalRecord, BookCopyRecord> RENTAL__FK_RENTAL_BOOK_COPY = Internal.createForeignKey(Rental.RENTAL, DSL.name("fk_rental_book_copy"), new TableField[] { Rental.RENTAL.ID_BOOK_COPY }, Keys.BOOK_COPY_PKEY, new TableField[] { BookCopy.BOOK_COPY.ID }, true);
    public static final ForeignKey<RentalRecord, ReaderRecord> RENTAL__FK_RENTAL_READER = Internal.createForeignKey(Rental.RENTAL, DSL.name("fk_rental_reader"), new TableField[] { Rental.RENTAL.ID_READER }, Keys.READER_PKEY, new TableField[] { Reader.READER.ID }, true);
}
